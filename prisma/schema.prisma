generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model client_master {
  id          Int         @id @default(autoincrement())
  user_id     Int
  username    String      @db.VarChar(100)
  nuvama_code String      @unique @db.VarChar(100)
  qcode       String?     @unique @db.VarChar(100)
  user_master user_master @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model daily_nav {
  date        String? @db.VarChar
  nav         String? @db.VarChar
  drawdown    String? @db.VarChar
  nuvama_code String? @db.VarChar
  id          Int     @id @default(autoincrement())
}

model portfolio_details {
  name                   String? @db.VarChar
  nuvama_code            String? @db.VarChar
  account                String? @db.VarChar
  portfolio_value        String? @db.VarChar
  cash                   String? @db.VarChar
  cash_percentage        String? @db.VarChar
  derivatives_percentage String? @db.VarChar
  strategy               String? @db.VarChar
  id                     Int     @id @default(autoincrement())
  initial_investment     String? @db.VarChar
}

model trailing_returns {
  name             String? @db.VarChar
  nuvama_code      String? @db.VarChar
  account          String? @db.VarChar
  d10              String? @db.VarChar
  m1               String? @db.VarChar
  m3               String? @db.VarChar
  m6               String? @db.VarChar
  y1               String? @db.VarChar
  y2               String? @db.VarChar
  y5               String? @db.VarChar
  since_inception  String? @db.VarChar
  mdd              String? @db.VarChar
  current_drawdown String? @db.VarChar
  id               Int     @id @default(autoincrement())
}

model user_master {
  id              Int             @id @default(autoincrement())
  email           String          @unique @db.VarChar(255)
  alternate_email String?         @unique @db.VarChar(255)
  password        String          @db.VarChar(255)
  hasaccess       Boolean?        @default(true)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  updated_at      DateTime        @updatedAt @db.Timestamp(6) // Automatically updates on modification
  reset_token     String?         @unique @db.VarChar(255)  // Stores reset token
  reset_expires   DateTime?       // Stores expiration time of reset token
  
  client_master   client_master[]
}
